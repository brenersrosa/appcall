// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String  @id @default(uuid())
  schedule_private Boolean @default(false)
  username         String  @unique
  name             String
  schedule_id      String? @db.Text
  bio              String? @db.Text
  email            String? @unique
  avatar_url       String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  timeIntervals UserTimeInterval[]

  userScheduling      Scheduling[]   @relation(name: "user")
  creatorScheduling   Scheduling[]   @relation(name: "creator")
  userFriends         Friend[]       @relation(name: "users")
  friendUserFriends   Friend[]       @relation(name: "friend_users")
  notificationRecieve Notification[] @relation(name: "user_recieve")
  notificationSender  Notification[] @relation(name: "user_sender")

  @@map("users")
}

model Account {
  id                  String  @id @default(uuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(uuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("sessions")
}

model UserTimeInterval {
  id                    String @id @default(uuid())
  week_day              Int
  time_start_in_minutes Int
  time_end_in_minutes   Int
  meet_duration         Int

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_time_intervals")
}

enum NotificationType {
  friend_request
  appointment
}

model Notification {
  id      String           @id @default(uuid())
  type    NotificationType
  as_read Boolean          @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id String
  user    User   @relation(name: "user_recieve", fields: [user_id], references: [id], onDelete: Cascade)

  sender_id String
  sender    User   @relation(name: "user_sender", fields: [sender_id], references: [id], onDelete: Cascade)

  scheduling_id String?
  scheduling    Scheduling? @relation(name: "scheduling", fields: [scheduling_id], references: [id])

  @@map("notifications")
}

model Scheduling {
  id           String   @id @default(uuid())
  date         DateTime
  name         String
  email        String
  phone        String?
  observations String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id String
  user    User   @relation(name: "user", fields: [user_id], references: [id], onDelete: Cascade)

  creator_id String
  creator    User   @relation(name: "creator", fields: [creator_id], references: [id], onDelete: Cascade)

  notification Notification[] @relation(name: "scheduling")

  @@map("schedulings")
}

enum FriendStatus {
  pending
  accepted
  rejected
}

model Friend {
  id     String       @id @default(uuid())
  status FriendStatus @default(pending)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id String
  user    User   @relation(name: "users", fields: [user_id], references: [id], onDelete: Cascade)

  friend_id String
  friend    User   @relation(name: "friend_users", fields: [friend_id], references: [id], onDelete: Cascade)

  @@map("friends")
}
